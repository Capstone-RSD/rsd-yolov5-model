# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Linting and Unittest

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      # - name: Run tests
      #   env:
      #     PYTHONPATH: $PYTHONPATH:./src
      #   # run: python -m unittest discover -s tests -p 'test_client.py'
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          # cache: 'pip' # caching pip dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint unittest2
          if [ -f requirements-prod.txt ]; then pip install -r requirements-prod.txt; fi
      - name: Analysing the code with pylint
        run: |
          cd src/
          pylint --logging-format-style=new --variable-naming-style=any --ignore-imports=y --fail-under=7 --logging-format-style=new rss_consumer.py
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          # cache: 'pip' # caching pip dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint unittest2 parameterized
          if [ -f requirements-prod.txt ]; then pip install -r requirements-prod.txt; fi
#       - name: Set up environment variables
#         run: |
#           echo "::set-env name=PYTHONPATH::${{ github.workspace }}/src"
      - name: Test with unittest
        run: |
          python -m unittest discover -s tests -p 'test_firebase.py'
